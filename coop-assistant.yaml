# D0/GPIO16 - Push Button Stop
# D1/GPIO5  - I2C SCL
# D2/GPIO4  - I2C SDA
# D3/GPIO0  - Push Button Up
# D4/GPIO2  - Coop Light PWM
# D5/GPIO14 - DHT Sensor
# D6/GPIO12 - Main Door
# D7/GPIO13 - Nesting Box Lid
# D8/GPIO15 - Motor PWM
# RX/GPIO3  - Push Button Down
# TX/GPIO1  - Motor Drive Enable

esphome:
  name: coop-assistant
  platform: ESP8266
  board: nodemcuv2
  esp8266_restore_from_flash: true
  
  includes:
    - veml7700_sensor.h
  
  libraries:
    - "Wire"
    - "SPI"
    - "Adafruit BusIO"
    - "https://github.com/MojaveTom/Adafruit_VEML7700"

# Enable logging
logger:
  level: DEBUG
  logs:
    ads1115: INFO
    sensor: INFO

# Enable Home Assistant API
api:
  services:
    - service: set_auto_open_arm
      then:
        - script.execute: auto_open_arm
        
    - service: set_auto_open_disarm
      then:
        - script.execute: auto_open_disarm

    - service: set_auto_close_arm
      then:
        - script.execute: auto_close_arm
        
    - service: set_auto_close_disarm
      then:
        - script.execute: auto_close_disarm

ota:
  password: !secret ota_pass 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  use_address: 10.0.101.91

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Coop-Assistant Fallback Hotspot"
    password: !secret ap_pass

captive_portal:

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: false
  
ads1115:
  - address: 0x48
  
globals:
  - id: auto_open_armed
    type: boolean
    restore_value: yes
    initial_value: "false"
    
  - id: auto_close_armed
    type: boolean
    restore_value: yes
    initial_value: "false"
    
time:
  - platform: sntp
    timezone: "America/Chicago"
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    
    on_time:
      # If automatic door opening is configured, arm it at 6am 
      - seconds: 0
        minutes: 0
        hours: 6
        then:
          - if:
              condition:
                lambda: 'return strcmp(id(door_mode).state.c_str(),"automatic");'
              then:
                - script.execute: auto_open_arm
              
      # If automatic door opening is configured, confirm at 8am if it actually opened
      - seconds: 0
        minutes: 0
        hours: 8
        then:
          - if:
              condition:
                and:
                  - lambda: 'return strcmp(id(door_mode).state.c_str(),"automatic");'
                  - lambda: 'return id(auto_open_armed) == true;'
              then:
                - script.execute: auto_open_disarm
                - logger.log: 'Open Armed Door (Timeout)'
                - homeassistant.event:
                    event: esphome.coop_assistant_automatic_door
                    data:
                      status: 'Open Armed Door (Timeout)'
                - cover.open: chicken_door
              
      # If automatic door closing is configured, arm it at 5 pm
      - seconds: 0
        minutes: 0
        hours: 17
        then:
          - if:
              condition:
                lambda: 'return strcmp(id(door_mode).state.c_str(),"automatic");'
              then:
                - script.execute: auto_close_arm

      # If automatic door closing is configured, confirm at 9pm if it actually closed
      - seconds: 0
        minutes: 0
        hours: 21
        then:
          - if:
              condition:
                and:
                  - lambda: 'return strcmp(id(door_mode).state.c_str(),"automatic");'
                  - lambda: 'return id(auto_close_armed) == true;'
              then:
                - script.execute: auto_close_disarm
                - logger.log: 'Close Armed Door (Timeout)'
                - homeassistant.event:
                    event: esphome.coop_assistant_automatic_door
                    data:
                      status: 'Close Armed Door (Timeout)'
                - cover.close: chicken_door        

binary_sensor:
  - platform: status
    name: "Coop Assistant Connectivity"
    
  - platform: gpio
    pin:
      number: GPIO12
      mode:
        input: true
        pullup: true
    name: "Main Door"
    device_class: door
    
  - platform: gpio
    pin:
      number: GPIO13
      mode:
        input: true
        pullup: true
    name: "Nesting Box Lid"
    device_class: door

  - platform: gpio
    pin:
      number: GPIO16
      mode:
        input: true
    id: button_stop
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      then:
        - logger.log: "Stop button was pressed"
        - cover.stop: chicken_door
    
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    id: button_open
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      then:
        - logger.log: "Open button was pressed"
        - cover.open: chicken_door
    
  - platform: gpio
    pin:
      number: GPIO3
      inverted: true
      mode:
        input: true
        pullup: true
    id: button_close
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      then:
        - logger.log: "Close button was pressed"
        - cover.close: chicken_door

sensor:
  - platform: dht
    pin: GPIO14
    model: DHT22_TYPE2
    temperature:
      name: "Coop Temperature"
      id: "temperature"
    humidity:
      name: "Coop Humidity"
      id: "humidity"
    update_interval: 60s
  
  - platform: custom
    lambda: |-
      auto veml7700 = new VEML7700Sensor();
      App.register_component(veml7700);
      return {veml7700->lux_sensor, veml7700->als_sensor};
    sensors:
    - name: "Coop Illuminance"
      id: 'illuminance'
      unit_of_measurement: Lux
      accuracy_decimals: 1
    - name: "Coop Illuminance (ALS)"
      unit_of_measurement: raw
      accuracy_decimals: 0
      internal: true
          
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 0.256
    id: "ads1115_ch0"
    update_interval: 1s
    
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 0.256
    id: "ads1115_ch1"
    update_interval: 1s
      
output:
  - platform: esp8266_pwm
    pin: GPIO2
    frequency: 100 Hz
    inverted: true
    id: light_pwm

  - platform: esp8266_pwm
    pin: 
      number: GPIO15
      mode:
        output: true
    frequency: 10000 Hz
    id: motor_pwm
    
  - platform: gpio
    pin:
      number: GPIO1
      mode: 
        output: true
    id: motor_drive_enable

light:
  - platform: monochromatic
    output: light_pwm
    name: "Coop Light"
    id: "coop_light"
    
select:
  - platform: template
    name: "Door Mode"
    id: "door_mode"
    options:
      - manual
      - automatic
    initial_option: manual
    restore_value: true
    optimistic: true
    on_value:
      - homeassistant.event:
          event: esphome.coop_assistant_automatic_door
          data:
            status: !lambda 'return "Door mode changed to " + id(door_mode).state;'
            device: !lambda 'return get_mac_address();'

number:
  - platform: template
    name: "Door Set Point"
    id: "door_set_point"
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 1000
    step: 1

cover:
  - platform: current_based
    name: "Chicken Door"
    device_class: "door"
    id: "chicken_door"
    open_sensor: ads1115_ch1
    open_action:
      - logger.log: "Release those cluckers!!!"
      - output.set_level:
          id: motor_pwm
          level: 20%
      - output.turn_on: motor_drive_enable
    open_duration: 50s
    open_moving_current_threshold: 0.015
    open_obstacle_current_threshold: 0.060
    close_sensor: ads1115_ch0
    close_action:
      - logger.log: "Bed time for the nuggets!!!"
      - output.set_level:
          id: motor_pwm
          level: 80%
      - output.turn_on: motor_drive_enable
    close_duration: 50s
    close_moving_current_threshold: 0.015
    close_obstacle_current_threshold: 0.060
    stop_action:
      - output.set_level:
          id: motor_pwm
          level: 50%
      - output.turn_off: motor_drive_enable
    max_duration: 180s
    start_sensing_delay: 5s
    
# Each minute, run checks for automatic door open/close
interval:
  - interval: 60s
    then:
      if:
        condition:
          and:
            - lambda: |-
                return id(door_mode).state == "automatic";
            - lambda: |-
                return id(auto_open_armed);
            - lambda: |-
                return id(illuminance).state > id(door_set_point).state;
        then:
          - script.execute: auto_open_disarm
          - homeassistant.event:
              event: esphome.coop_assistant_automatic_door
              data:
                status: "Open Armed Door"
                device: !lambda 'return get_mac_address();'
          - logger.log: "Open Armed Door"
          - cover.open: chicken_door

  - interval: 60s
    then:
      if:
        condition:
          and:
            - lambda: |-
                return id(door_mode).state == "automatic";
            - lambda: |-
                return id(auto_close_armed);
            - lambda: |-
                return id(illuminance).state < id(door_set_point).state;
        then:
          - script.execute: auto_close_disarm
          - homeassistant.event:
              event: esphome.coop_assistant_automatic_door
              data:
                status: "Close Armed Door"
                device: !lambda 'return get_mac_address();'
          - logger.log: "Close Armed Door"
          - cover.close: chicken_door
          
script:
  - id: auto_open_arm
    then:
      - if:
          condition:
            - lambda: 'return id(auto_close_armed);'
          then:
            - script.execute: auto_close_disarm
      - globals.set:
          id: auto_open_armed
          value: 'true'
      - logger.log: "Automatic Open Armed"
      - homeassistant.event:
          event: esphome.coop_assistant_automatic_door
          data:
            status: "Automatic Open Armed"
            device: !lambda 'return get_mac_address();'
  - id: auto_open_disarm
    then:
      - globals.set:
          id: auto_open_armed
          value: 'false'
      - logger.log: "Automatic Open Disarmed"
      - homeassistant.event:
          event: esphome.coop_assistant_automatic_door
          data:
            status: "Automatic Open Disarmed"
            device: !lambda 'return get_mac_address();'
  - id: auto_close_arm
    then:
      - if:
          condition:
            - lambda: 'return id(auto_open_armed);'
          then:
            - script.execute: auto_open_disarm
      - globals.set:
          id: auto_close_armed
          value: 'true'
      - logger.log: "Automatic Close Armed"
      - homeassistant.event:
          event: esphome.coop_assistant_automatic_door
          data:
            status: "Automatic Close Armed"
            device: !lambda 'return get_mac_address();'
  - id: auto_close_disarm
    then:
      - globals.set:
          id: auto_close_armed
          value: 'false'
      - logger.log: "Automatic Close Disarmed"
      - homeassistant.event:
          event: esphome.coop_assistant_automatic_door
          data:
            status: "Automatic Close Disarmed"
            device: !lambda 'return get_mac_address();'
